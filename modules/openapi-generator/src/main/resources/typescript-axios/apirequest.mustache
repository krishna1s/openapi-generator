import { test, expect } from '@playwright/test';
import { createRequestFunction } from '../../.lib/common';
import * as testData from "./data/{{testDataFileNameWithoutExt}}.json";
import { SwaggerValidator } from '../../.lib/schemaValidator.ts';

let swaggerPath = '../swagger.json'
let validator = new SwaggerValidator(swaggerPath);

{{#operations}}
{{#operation}}
// {{summary}}
test.describe('{{operationId}} valid cases', function() {
    var testCases: any[] = testData["{{operationId}}"];
    testCases.map(tc => {
        test(tc["summary"], async () => {
            let response = await createRequestFunction('{{operationId}}', '0', tc);

            test.info().attach("Observed Response", { body: JSON.stringify(response.data) });
            expect(response.status).toBe(200);

            // Check response in case of valid test expected outcome.
            let validationErrors = validator.validateAgainstDefinition('{{returnType}}', response.data);
            let errors: string[] = []
            validationErrors.errors.forEach(error => errors.push(error.message + ", at path: " + error.path + "."));
            expect(errors.length, "Response Validation Failed.\n" + errors.join("\n")).toBe(0);
        });
    });
});

test.describe('{{operationId}} invalid cases', function() {
    // TODO : Generate test cases based on the invalid test case data
});
{{/operation}}
{{/operations}}