import { test, expect } from '@playwright/test';
import { createRequestFunction } from '../../.lib/common';
import {TestData} from "./data/{{testDataFileName}}"
import { SwaggerValidator } from '../../.lib/schemaValidator.ts';

let swaggerPath = '../swagger.json'
let validator = new SwaggerValidator(swaggerPath);

{{#operations}}
{{#operation}}
// {{summary}}
test.describe('{{operationId}}', function() {

    test('{{operationId}} - Valid Inputs', async () => {
        // Check if a file called '{{operationId}}_{{httpMethod}}' exists, otherwise use generated data
    });

{{#scenarios}}
    test('{{scenario}}', async () => {
	    let testData = TestData['{{operationId}}']["scenarios"]['{{-index}}'];
        let response = await createRequestFunction('{{operationId}}', '{{-index}}', testData);
        expect(response.status).toBe({{expectedOutcome.statusCode}});
        {{#valid}}

        // Check response in case of valid test expected outcome.
        let validationErrors = validator.validateAgainstDefinition('{{returnType}}', response.data);
        let errors: string[] = []
        validationErrors.errors.forEach(error => errors.push(error.message + ", at path: " + error.path + "."));
        expect(errors.length, "Response Validation Failed.\n" + errors.join("\n")).toBe(0);
        {{/valid}}
    });
{{/scenarios}}
});
{{/operation}}

{{/operations}}